import pandas as pd
from transformers import MarianMTModel, MarianTokenizer
from langdetect import detect

# üîê Load environment variables from Api.env
from dotenv import load_dotenv
import os
import openai

load_dotenv(dotenv_path=REMOVED_SECRETApi.envREMOVED_SECRET)  # Load your DeepSeek key securely
openai.api_key = os.getenv(REMOVED_SECRETDEEPSEEK_API_KEYREMOVED_SECRET)
openai.api_base = REMOVED_SECREThttps://api.deepseek.com/v1REMOVED_SECRET

# Auto-install spellchecker if not present
try:
    from spellchecker import SpellChecker
except ModuleNotFoundError:
    import subprocess
    import sys
    subprocess.check_call([sys.executable, REMOVED_SECRET-mREMOVED_SECRET, REMOVED_SECRETpipREMOVED_SECRET, REMOVED_SECRETinstallREMOVED_SECRET, REMOVED_SECRETpyspellcheckerREMOVED_SECRET])
    from spellchecker import SpellChecker

# Spell checker setup
spell = SpellChecker()

# Load dataset
amazon_df = pd.read_csv(REMOVED_SECRETC:\\Users\\65988\\Documents\\GitHub\\EE6405C22\\NLP\\dataset\\Amazon_en_to_es.csvREMOVED_SECRET)

# Load MarianMT English-Spanish models
models = {
    REMOVED_SECRETen‚ÜíesREMOVED_SECRET: REMOVED_SECRETHelsinki-NLP/opus-mt-en-esREMOVED_SECRET,
    REMOVED_SECRETes‚ÜíenREMOVED_SECRET: REMOVED_SECRETHelsinki-NLP/opus-mt-es-enREMOVED_SECRET
}

translation_pipelines = {}
for direction, model_name in models.items():
    print(fREMOVED_SECRETüîÑ Loading model: {direction}REMOVED_SECRET)
    tokenizer = MarianTokenizer.from_pretrained(model_name)
    model = MarianMTModel.from_pretrained(model_name)
    translation_pipelines[direction] = (tokenizer, model)

# Translation function
def translate(text, direction):
    tokenizer, model = translation_pipelines[direction]
    inputs = tokenizer(text, return_tensors=REMOVED_SECRETptREMOVED_SECRET, padding=True)
    outputs = model.generate(**inputs)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Semantic rephrasing with DeepSeek
def semantic_rephrase_deepseek(query):
    prompt = fREMOVED_SECRETREMOVED_SECRETREMOVED_SECRETYou are a helpful assistant that improves e-commerce search queries.
Given the user's search input: REMOVED_SECRET{query}REMOVED_SECRET, rephrase or expand it into a more descriptive English query that helps retrieve more relevant product titles from a catalog.

Only output the improved query, no explanation.REMOVED_SECRETREMOVED_SECRETREMOVED_SECRET
    
    response = openai.ChatCompletion.create(
        model=REMOVED_SECRETdeepseek-chatREMOVED_SECRET,
        messages=[{REMOVED_SECRETroleREMOVED_SECRET: REMOVED_SECRETuserREMOVED_SECRET, REMOVED_SECRETcontentREMOVED_SECRET: prompt}],
        temperature=0.3,
        max_tokens=100
    )
    return response[REMOVED_SECRETchoicesREMOVED_SECRET][0][REMOVED_SECRETmessageREMOVED_SECRET][REMOVED_SECRETcontentREMOVED_SECRET].strip()

# Search function
def search_dataset(df, column, query):
    return df[df[column].str.contains(query, case=False, na=False)]

# Main loop
while True:
    user_input = input(REMOVED_SECRET\nEnter your product search query (English/Spanish, or type 'exit' to quit): REMOVED_SECRET)
    if user_input.lower() in [REMOVED_SECRETexitREMOVED_SECRET, REMOVED_SECRETquitREMOVED_SECRET]:
        print(REMOVED_SECRETüëã Exiting search. Goodbye!REMOVED_SECRET)
        break

    # Spell correct input
    corrected_input = REMOVED_SECRET REMOVED_SECRET.join([spell.correction(w) or w for w in user_input.split()])
    if corrected_input.lower() != user_input.lower():
        print(fREMOVED_SECRETüìù Corrected input: {corrected_input}REMOVED_SECRET)
    else:
        corrected_input = user_input

    # Detect language
    detected_lang = detect(corrected_input)
    print(fREMOVED_SECRETüîç Detected language: {detected_lang}REMOVED_SECRET)

    # Fallback logic if detection is off but input is ASCII-like
    if detected_lang not in [REMOVED_SECRETenREMOVED_SECRET, REMOVED_SECRETesREMOVED_SECRET]:
        if all(c.isascii() and (c.isalpha() or c.isspace()) for c in corrected_input):
            print(fREMOVED_SECRET‚ö†Ô∏è Detected '{detected_lang}', trying both English and Spanish due to input format.REMOVED_SECRET)

            # Try both interpretations
            en_results = search_dataset(amazon_df, REMOVED_SECRETtitleREMOVED_SECRET, corrected_input)
            es_to_en_query = translate(corrected_input, REMOVED_SECRETes‚ÜíenREMOVED_SECRET)
            es_results = search_dataset(amazon_df, REMOVED_SECRETtitleREMOVED_SECRET, es_to_en_query)

            if not en_results.empty:
                print(REMOVED_SECRET‚úÖ Interpreted as English.REMOVED_SECRET)
                search_query_en = corrected_input
                detected_lang = REMOVED_SECRETenREMOVED_SECRET
                results = en_results
            elif not es_results.empty:
                print(REMOVED_SECRET‚úÖ Interpreted as Spanish.REMOVED_SECRET)
                search_query_en = es_to_en_query
                detected_lang = REMOVED_SECRETesREMOVED_SECRET
                results = es_results
            else:
                print(REMOVED_SECRET‚ùå No matching results found in either English or Spanish.REMOVED_SECRET)
                continue
        else:
            print(REMOVED_SECRET‚ö†Ô∏è Only English or Spanish are supported. Try again.REMOVED_SECRET)
            continue
    else:
        # Normal translation flow
        if detected_lang == REMOVED_SECRETesREMOVED_SECRET:
            search_query_en = translate(corrected_input, REMOVED_SECRETes‚ÜíenREMOVED_SECRET)
        else:
            search_query_en = corrected_input

        # Semantic enhancement
        print(REMOVED_SECRETüß† Enhancing query with semantic understanding via DeepSeek...REMOVED_SECRET)
        semantic_query = semantic_rephrase_deepseek(search_query_en)

        # Show and log DeepSeek rephrased query
        if semantic_query.lower().strip() != search_query_en.lower().strip():
            print(fREMOVED_SECRETüîç Original query       : {search_query_en}REMOVED_SECRET)
            print(fREMOVED_SECRETüß† DeepSeek-enhanced    : {semantic_query}REMOVED_SECRET)
        else:
            print(fREMOVED_SECRET‚ÑπÔ∏è DeepSeek returned the same query: {semantic_query}REMOVED_SECRET)

        with open(REMOVED_SECRETdeepseek_log.txtREMOVED_SECRET, REMOVED_SECRETaREMOVED_SECRET, encoding=REMOVED_SECRETutf-8REMOVED_SECRET) as log:
            log.write(fREMOVED_SECRETOriginal: {search_query_en} | Rephrased: {semantic_query}\nREMOVED_SECRET)

        # Perform search
        results = search_dataset(amazon_df, REMOVED_SECRETtitleREMOVED_SECRET, semantic_query)
        if results.empty:
            print(REMOVED_SECRET‚ùå No matching results found.REMOVED_SECRET)
            continue

    # Show results
    print(REMOVED_SECRET‚úÖ Search Results:REMOVED_SECRET)
    print(results.head())

    # Translate results back to Spanish
    if detected_lang == REMOVED_SECRETesREMOVED_SECRET:
        print(REMOVED_SECRET\nüåç Translated Results:REMOVED_SECRET)
        translated_titles = [translate(title, REMOVED_SECRETen‚ÜíesREMOVED_SECRET) for title in results[REMOVED_SECRETtitleREMOVED_SECRET].head()]
        for original, translated in zip(results[REMOVED_SECRETtitleREMOVED_SECRET].head(), translated_titles):
            print(fREMOVED_SECRET- {original} ‚Üí {translated}REMOVED_SECRET)
    else:
        print(REMOVED_SECRET\nüåç All results already in English.REMOVED_SECRET)
